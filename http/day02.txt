http 모듈
    http 웹 서버를 생성하는 것과 관련된 모든 기능을 담당 ( 서버를 만드는 기능)
    
    createServer() : server 객체를 생성
    writeHead() : HTTP RESPONSE MESSAGE(응답메세지) header의 정보를 구성할 수 있음.
    end() : HTTP RESPONSE MESSAGE(응답메세지) body를 작성 할 수 있음
    listen() : 서버를 실행하고 클라이언트를 기다리는 상태

    하지만 현재 http 모듈만을 사용해서 서버를 구성하는 경우 없음
    이를 활용한 express나 nestJS 등 더 편리하고 많은 기능을 지원하는 모듈을 사용하여
    서버구성 

----------------------------------------------------------------------------------    


nodemon모듈
    서버 코드를 변경할 때마다 서버를 종료하지 않아도
    알아서 서버를 재빌드하는 기능
    npm i -g nodemon
    sudo npm i -g nodemon

    실행방법은
    nodemon 파일명

express 모듈
    http 모듈만을 사용해서 웹 서버를 구성하게 되면 굉장히 많은 기능을 직접 구현
    기능을 구현한다는 것은 코드가 많고 지저분해진다는 이야기, 따라서 간단한 코드로
    웹 서버의 기능을 대부분 혼자서 구현이 가능한 express 모듈이 등장

    npm i express
----------------------------------------------------------------------------------

express의 미들웨어 
    middele ware = 중간통로
    express의 middele = were란
    데이터를 조작하기도 기능을 추가하기도 하고 나쁜 요청 및 예외사항을 걸러내기도
    하는 역할을 하고 있음

    express의 대부분의 기능은 express의 미들웨어로 컨트롤 하기 떄문에 사실상 express의전부라고도 할 수 있음

    사용법 
    app.use(미들웨어) --- 모든 요청
    app.use('/abc', 미들웨어) --- 백엔드 요청 URL이 /abc로 시작하는 요청에서만
    app.post('/abc',미들웨어) --- /abc로 시작하는 post 요청에서만

    종류

    1.morgen
    2. body-parser
    3.static
    4.cookie-parser

----------------------------------------------------------------------------------

req, res MESSAGE

    req.app
    *req.body : 요청의 본문(데이터) ex) req.body.email
    *req.cookies : 요청의 쿠키를 해석
    req.ip
    *req.params : url에 담긴 정보
    *req.query : url에 담긴 데이터
    *req.get : 요청의 헤더를 가지고올 수 있음 ex) access_token이 있는지 확인

    res.app
    *res.cookies : 프론트엔드에 쿠키를 응답합니다. 해당 쿠키는 프론트에서 따로 설정하지 않아도 공유
    *res.clearCookie : 쿠키 삭제
    res.write
    res.end
    *res.json : json()형식으로 데이터 응답 메세지 body에 보냄
    res.redirect
    res.render
    *res.send :데이터를 그대로 응답메세지 body에 실어보냄
    res.sendFile
    *res.set : 응답 메세지 헤더를 셋팅
    *res.status : HTTP RESPONSE STATUS(100,200,300,400,500)

----------------------------------------------------------------------------------

JSON ( JavaScript Object Ntation)

    1.데이터를 저장하거나 전송에 많이 사용되는 경량의 Data 교환 방식
    2. 자바스크립트에서 객체를 만들 떄 사용하는 표현식

    JavaScript의 객체 === json
    JavaScript에서 json은 자동으로 객체로 변환

    * fatch 문자열을 결과물로 받기 떄문에 .json()으로 파싱
      그리고 그 결과는 json형식으로 되기때문에 javascript의 객체와 같은 형태

      ex) 
      a = {
        key: value,
        key : value,
      }

      // json도 똑같이 key value 값을 토대로 만들어진 Data 형식

      ex)

      {
        "name" : "황순욱"
      }

      // 즉 req와 res message의 데이터 형식은 json형식으로 주고받게된다.
      => 
      {
        email: "test@test.com",
        password: "test
      }
      ===> {
        "email" : "test@test.com
      }

       header: {
        Auhorization : token
       },
       body : {
        email : "test@test.com",
        password:"test
       }